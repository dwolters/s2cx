/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. SQLXMLParser.jj */
/*@egen*/options{  JDK_VERSION = "1.5";  static = false;                }PARSER_BEGIN(SQLXMLParser)package de.upb.s2cx.parser;import de.upb.s2cx.parser.sql.*;import de.upb.s2cx.parser.sql.xml.*;import gnu.trove.stack.TByteStack;import gnu.trove.stack.array.TByteArrayStack;public class SQLXMLParser/*@bgen(jjtree)*/implements SQLXMLParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTSQLXMLParserState jjtree = new JJTSQLXMLParserState();

/*@egen*/  private static TByteStack xmlAggStack = new TByteArrayStack();  private static TByteStack depth = new TByteArrayStack();  private static void inc()  {	xmlAggStack.push((byte)(xmlAggStack.pop()+1));	if(xmlAggStack.peek() > depth.peek())	{	  	depth.pop();			depth.push(xmlAggStack.peek());	}  }  private static void dec()  {	xmlAggStack.push((byte)(xmlAggStack.pop()-1));  }  private static void push()  {	xmlAggStack.push((byte)0);	depth.push((byte)0);  }  private static byte pop()  {    xmlAggStack.pop();	return depth.pop();  }  public Statement parse() throws ParseException  {	TableFactory.reset();	return root();  }}PARSER_END(SQLXMLParser)SKIP :{  " "| "\t"| "\n"| "\r"}TOKEN : /* LITERALS */{  < CHAR :    (      < UPPERCHAR >    | < LOWERCHAR >    ) >| < NUMBER : (< DIGIT >)+ >| < LOWERCHAR : [ "a"-"z" ] >| < UPPERCHAR : [ "A"-"Z" ] >| < DIGIT : [ "0"-"9" ] >| < AS : "AS" >| < COMMA : "," >| < SELECT : "SELECT" >| < FROM : "FROM" >| < WHERE : "WHERE" >| < ORDERBY : "ORDER BY" >| < GROUPBY : "GROUP BY" >| < ASC : "ASC" >| < DESC : "DESC" >| < NAME : "NAME" >| < DATE : "DATE" >| < XMLELEMENT : "XMLELEMENT" >| < XMLATTRIBUTES : "XMLATTRIBUTES" >| < XMLFOREST : "XMLFOREST" >| < XMLCONCAT : "XMLCONCAT" >| < XMLAGG : "XMLAGG" >| < SUM : "SUM" >| < AVG : "AVG" >| < MIN : "MIN" >| < MAX : "MAX" >| < COUNT : "COUNT" >| < EXISTS : "EXISTS" >| < STRING :    "'"    (      < CHAR >    | < DIGIT >    | " "    | "%"    | "#"    | "-"    | "_"    )*    "'" >| < IDENTIFIER :    "\""    (      < CHAR >    | < DIGIT >    | "_"    )+    "\"" >| < DOT : "." >| < LEFT_PAR : "(" >| < RIGHT_PAR : ")" >| < EQUAL : "=" >| < NOTEQUAL : "<>" >| < GREATER : ">" >| < LESSER : "<" >| < LESSEQUAL : "<=" >| < GREATEREQUAL : ">=" >| < LIKE : "LIKE" >| < AND : "AND" >| < OR : "OR" >| < NOT : "NOT" >| < IN : "IN" >| < ASTERISK : "*" >| < SOLIDUS : "/" >| < PLUS : "+" >| < MINUS : "-" >}Statement root() :{/*@bgen(jjtree) root */
  SimpleNode jjtn000 = new SimpleNode(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Statement s;}{/*@bgen(jjtree) root */
  try {
/*@egen*/  s = select() < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return s;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Statement select() :{/*@bgen(jjtree) select */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  push();  Statement s = new Statement();  FromClause from = new FromClause();  OrderByClause orderBy = null;  WhereClause where = null;  GroupByClause groupBy = null;  Table t;  Value v;}{/*@bgen(jjtree) select */
  try {
/*@egen*/  < SELECT > v = xmlValue()  {    s.add(v);  }  (    < COMMA > v = value()    {      s.add(v);    }  )*  < FROM > t = table()  {    from.add(t);  }  (    < COMMA > t = table()    {      from.add(t);  	}  )*  (    where = whereClause()  )?  (    groupBy = groupByClause()  )?  (	orderBy = orderByClause()  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    s.setFromClause(from);    s.setOrderByClause(orderBy);    s.setGroupByClause(groupBy);    s.setWhereClause(where);    s.setXmlAggDepth(pop());    return s;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Table table() :{/*@bgen(jjtree) table */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token name;  Token alias;}{/*@bgen(jjtree) table */
  try {
/*@egen*/  name = < IDENTIFIER > alias = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return TableFactory.createTable(name.image, alias.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Column column() :{/*@bgen(jjtree) column */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token tableAlias;  Token columnName;}{/*@bgen(jjtree) column */
  try {
/*@egen*/  tableAlias = < IDENTIFIER > < DOT > columnName = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {   Column c = ColumnFactory.createColumn(columnName.image, TableFactory.getTableByAlias(tableAlias.image));   return c;   }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}XmlValue additiveTerm() :{/*@bgen(jjtree) additiveTerm */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVETERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token op = null;  XmlValue left = null;  XmlValue right = null;}{/*@bgen(jjtree) additiveTerm */
  try {
/*@egen*/  left = term()  (    op = < PLUS > right = additiveTerm() |    op = < MINUS > right = additiveTerm()  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if(right != null)    {      	  Term t = new Term();	  t.setOperator(op.image);	  t.setLeft(left);	  t.setRight(right);	  return t;	}	else		return left;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}XmlValue term() :{/*@bgen(jjtree) term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token op = null;  XmlValue left = null;  XmlValue right = null;}{/*@bgen(jjtree) term */
  try {
/*@egen*/  left = factor()  (    op = < ASTERISK > right = term() |  	op = < SOLIDUS > right = term()  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if(right != null)    {      	  Term t = new Term();	  t.setOperator(op.image);	  t.setLeft(left);	  t.setRight(right);	  return t;	}	else		return left;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}XmlValue factor() :{/*@bgen(jjtree) factor */
  SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  XmlValue value;}{/*@bgen(jjtree) factor */
  try {
/*@egen*/  (< MINUS > | < PLUS >)? value = value()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    //TODO add sign    return value;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}WhereClause whereClause() :{/*@bgen(jjtree) whereClause */
  SimpleNode jjtn000 = new SimpleNode(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  WhereClause where = new WhereClause();  Condition c;}{/*@bgen(jjtree) whereClause */
  try {
/*@egen*/  < WHERE > c = conditions()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    where.setCondition(c);    return where;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}GroupByClause groupByClause() :{/*@bgen(jjtree) groupByClause */
  SimpleNode jjtn000 = new SimpleNode(JJTGROUPBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  GroupByClause groupBy = new GroupByClause();  Column c;}{/*@bgen(jjtree) groupByClause */
  try {
/*@egen*/  < GROUPBY > c = column()  {    groupBy.add(c);  }  (    < COMMA > c = column()    {      groupBy.add(c);    }  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {	return groupBy;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OrderByClause orderByClause() :{/*@bgen(jjtree) orderByClause */
  SimpleNode jjtn000 = new SimpleNode(JJTORDERBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token order = null;  Column c;  OrderByClause orderBy = new OrderByClause();}{/*@bgen(jjtree) orderByClause */
  try {
/*@egen*/  < ORDERBY > c = column()  (    order = < ASC >  | order = < DESC >  )?  {    orderBy.add(ColumnFactory.createSortColumn(c,(order == null || order.image.equals("ASC") ? true : false)));    order = null;  }  (    < COMMA > c = column()    (      order = < ASC >    | order = < DESC >    )?    {      orderBy.add(ColumnFactory.createSortColumn(c,(order == null || order.image.equals("ASC") ? true : false)));      order = null;  	}  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return orderBy;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Condition conditions() :{/*@bgen(jjtree) conditions */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Condition left = null;  Condition right = null;}{/*@bgen(jjtree) conditions */
  try {
/*@egen*/  left = andCondition()  (    < OR > right = conditions()  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if(right != null)    {      return new ConditionTree<Condition, Condition >("OR", left, right);    }    else      return left;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Condition andCondition() :{/*@bgen(jjtree) andCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTANDCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Condition left = null;  Condition right = null;}{/*@bgen(jjtree) andCondition */
  try {
/*@egen*/  (    LOOKAHEAD(2)    (      < LEFT_PAR > left = conditions() < RIGHT_PAR >      {        left = new ParenthesizedCondition(left);      }    )  |    (      left = condition()      (        < AND > right = andCondition()      )?    )  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if(right != null)    {      return new ConditionTree<Condition, Condition >("AND", left, right);    }    else      return left;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Condition condition() :{/*@bgen(jjtree) condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Condition c = null;  Condition left;}{/*@bgen(jjtree) condition */
 try {
/*@egen*/ (   (  	left = value()    (      c = valueCondition(left)  	| c = columnCondition(left)  	)	) |    c = existsCondition() )/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/{  return c;}/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/}Condition valueCondition(Condition left) :{/*@bgen(jjtree) valueCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTVALUECONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  ConditionTree<Condition, Condition > t = new ConditionTree<Condition, Condition >();  Condition right;  String op;}{/*@bgen(jjtree) valueCondition */
  try {
/*@egen*/  op = relationalOperator() right = value()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    t.setLeft(left);    t.setRight(right);    t.setOperator(op);    return t;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Condition existsCondition() :{/*@bgen(jjtree) existsCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTEXISTSCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Statement s;}{/*@bgen(jjtree) existsCondition */
  try {
/*@egen*/  < EXISTS > < LEFT_PAR > s = select() < RIGHT_PAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return new ExistsCondition(s);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Condition columnCondition(Condition left) :{/*@bgen(jjtree) columnCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLUMNCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Condition con;  Column col;  Token negated =  null;  Condition s;  Value like;}{/*@bgen(jjtree) columnCondition */
  try {
/*@egen*/  (negated = < NOT >)?  (    (      s = inCondition()   	  {   	    ConditionTree<Condition, Condition > c1 = new ConditionTree<Condition, Condition >();   	    c1.setOperator("IN");   	    c1.setLeft(left);   	    c1.setRight(s);   	    c1.setNegated(negated != null);   	    con = c1;   	  }    )  | (      like = likeCondition()  	  {  	    ConditionTree<Condition, Value > c2 = new ConditionTree<Condition, Value>();   	    c2.setOperator("LIKE");   	    c2.setLeft(left);   	    c2.setRight(like);   	    c2.setNegated(negated != null);   	    con = c2;  	  }    )  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return con;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Condition inCondition() :{/*@bgen(jjtree) inCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTINCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Condition c;}{/*@bgen(jjtree) inCondition */
  try {
/*@egen*/  < IN > < LEFT_PAR > (c = array() | c = select()) < RIGHT_PAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return c;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}Value likeCondition() :{/*@bgen(jjtree) likeCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTLIKECONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Value v;}{/*@bgen(jjtree) likeCondition */
  try {
/*@egen*/  < LIKE > v = value()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return v;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String relationalOperator() :{/*@bgen(jjtree) relationalOperator */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATIONALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token op;}{/*@bgen(jjtree) relationalOperator */
  try {
/*@egen*/  (    op = < EQUAL >  | op = < NOTEQUAL >  | op = < GREATER >  | op = < LESSER >  | op = < LESSEQUAL >  | op = < GREATEREQUAL >  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return op.image;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}XmlElementFunction xmlElement() :{/*@bgen(jjtree) xmlElement */
  SimpleNode jjtn000 = new SimpleNode(JJTXMLELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token name;  XmlValue value = null;  XmlElementFunction function = new XmlElementFunction();}{/*@bgen(jjtree) xmlElement */
  try {
/*@egen*/  < XMLELEMENT > < LEFT_PAR > < NAME > name = < IDENTIFIER >  (    LOOKAHEAD(2)    < COMMA > xmlAttributes(function)  )?  (    < COMMA > value = xmlValue()    {      function.add(value);    }  )*  < RIGHT_PAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    function.setName(name.image);    return function;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void xmlAttributes(XmlElementFunction f) :{/*@bgen(jjtree) xmlAttributes */
 SimpleNode jjtn000 = new SimpleNode(JJTXMLATTRIBUTES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/AbstractXmlAttribute att;}{/*@bgen(jjtree) xmlAttributes */
  try {
/*@egen*/  < XMLATTRIBUTES > < LEFT_PAR >  att = xmlAttribute()  {    f.addAttribute(att);  }  (    < COMMA > att = xmlAttribute()    {      f.addAttribute(att);    }  )*  < RIGHT_PAR >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}AbstractXmlAttribute xmlAttribute() :{/*@bgen(jjtree) xmlAttribute */
  SimpleNode jjtn000 = new SimpleNode(JJTXMLATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Value v;  Token alias;}{/*@bgen(jjtree) xmlAttribute */
  try {
/*@egen*/  v = value() < AS > alias = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if(v instanceof StringValue)    {      return new XmlStringAttribute(alias.image, v.getValue());    } else if(v instanceof Column) {      return new XmlColumnAttribute(alias.image, (Column)v);    } else if(v instanceof SqlFunction) {      return new XmlFunctionAttribute(alias.image, (SqlFunction)v);    }  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}XmlConcatFunction xmlConcat() :{/*@bgen(jjtree) xmlConcat */
  SimpleNode jjtn000 = new SimpleNode(JJTXMLCONCAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  XmlValue v;  XmlConcatFunction f = new XmlConcatFunction();}{/*@bgen(jjtree) xmlConcat */
  try {
/*@egen*/  < XMLCONCAT > < LEFT_PAR > v = xmlValue()  {    f.add(v);  }  (    < COMMA > v = xmlValue()    {      f.add(v);    }  )+  < RIGHT_PAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return f;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}XmlForestFunction xmlForest() :{/*@bgen(jjtree) xmlForest */
  SimpleNode jjtn000 = new SimpleNode(JJTXMLFOREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  XmlForestFunction f = new XmlForestFunction();  XmlElementWrapper v;}{/*@bgen(jjtree) xmlForest */
  try {
/*@egen*/  < XMLFOREST > < LEFT_PAR > v = xmlForestElement()  {    f.add(v);  }  (    < COMMA > v = xmlForestElement()    {      f.add(v);    }  )*  < RIGHT_PAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return f;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}XmlElementWrapper xmlForestElement() :{/*@bgen(jjtree) xmlForestElement */
  SimpleNode jjtn000 = new SimpleNode(JJTXMLFORESTELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token alias;  XmlValue v;}{/*@bgen(jjtree) xmlForestElement */
  try {
/*@egen*/  v = xmlValue() < AS > alias = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return new XmlElementWrapper(v, alias.image);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}XmlAggFunction xmlAgg() :{/*@bgen(jjtree) xmlAgg */
  SimpleNode jjtn000 = new SimpleNode(JJTXMLAGG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OrderByClause orderBy = null;  XmlAggFunction f = new XmlAggFunction();  XmlValue v;  inc();}{/*@bgen(jjtree) xmlAgg */
  try {
/*@egen*/  < XMLAGG > < LEFT_PAR > v = xmlValue()  (    orderBy = orderByClause()  )?  < RIGHT_PAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    f.setParameter(v);    f.setOrderByClause(orderBy);    dec();    return f;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}SqlFunction sqlFunction() :{/*@bgen(jjtree) sqlFunction */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token name;  XmlValue value;  SqlFunction f;  Column c = null;}{/*@bgen(jjtree) sqlFunction */
  try {
/*@egen*/  (    (    name = < COUNT > < LEFT_PAR > (c = column() | < ASTERISK >) < RIGHT_PAR >    {      f = new SqlFunction(name.image, c == null ? new StringValue("*") : c);    }  )|  (    (      name = < SUM >    | name = < MIN >    | name = < MAX >    | name = < AVG >    )    < LEFT_PAR > value = additiveTerm() < RIGHT_PAR >    {            f = new SqlFunction(name.image, value);    }  ))/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return f;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}XmlValue value() :{/*@bgen(jjtree) value */
  SimpleNode jjtn000 = new SimpleNode(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token strValue = null;  Column c = null;  Statement s = null;  XmlValue value = null;  Token date = null;}{/*@bgen(jjtree) value */
  try {
/*@egen*/  (   strValue = < STRING >  | strValue = < NUMBER >  | < DATE > date = < STRING >   | c = column()  | value = sqlFunction()  |    (      < LEFT_PAR >      (        (value = select() | value = additiveTerm())        {          value = new ParanthesizedValue(value);         }      )      < RIGHT_PAR >    )  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if(strValue != null)    	return new StringValue(strValue.image);    else if(c != null)    	return c;    else if(value != null)    	return value;    else if(date != null)    	return new DateValue(date.image);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}XmlValue array() : {/*@bgen(jjtree) array */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token value;  ArrayValue array = new ArrayValue();}{/*@bgen(jjtree) array */
  try {
/*@egen*/  (    value = < STRING > | value = < NUMBER >  )  {    array.add(value.image);  }  {      }  (    < COMMA >    (      value = < STRING > | value = < NUMBER >	)	{	  array.add(value.image);	}  )+/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {	return array;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}XmlValue xmlValue() :{/*@bgen(jjtree) xmlValue */
  SimpleNode jjtn000 = new SimpleNode(JJTXMLVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  XmlValue v;}{/*@bgen(jjtree) xmlValue */
  try {
/*@egen*/  (    v = value()	| v = xmlElement()	| v = xmlConcat()	| v = xmlForest()	| v = xmlAgg()  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return v;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}