/* Generated By:JJTree&JavaCC: Do not edit this line. SQLXMLParser.java */
package de.upb.s2cx.parser;
import de.upb.s2cx.parser.sql.*;
import de.upb.s2cx.parser.sql.xml.*;
import gnu.trove.stack.TByteStack;
import gnu.trove.stack.array.TByteArrayStack;

public class SQLXMLParser/*@bgen(jjtree)*/implements SQLXMLParserTreeConstants, SQLXMLParserConstants {/*@bgen(jjtree)*/
  protected JJTSQLXMLParserState jjtree = new JJTSQLXMLParserState();private static TByteStack xmlAggStack = new TByteArrayStack();
  private static TByteStack depth = new TByteArrayStack();

  private static void inc()
  {
        xmlAggStack.push((byte)(xmlAggStack.pop()+1));
        if(xmlAggStack.peek() > depth.peek())
        {
                depth.pop();
                depth.push(xmlAggStack.peek());
        }
  }

  private static void dec()
  {
        xmlAggStack.push((byte)(xmlAggStack.pop()-1));
  }

  private static void push()
  {
        xmlAggStack.push((byte)0);
        depth.push((byte)0);
  }

  private static byte pop()
  {
    xmlAggStack.pop();
        return depth.pop();
  }

  public Statement parse() throws ParseException
  {
        TableFactory.reset();
        return root();
  }

  final public Statement root() throws ParseException {
 /*@bgen(jjtree) root */
  SimpleNode jjtn000 = new SimpleNode(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Statement s;
    try {
      s = select();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return s;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Statement select() throws ParseException {
 /*@bgen(jjtree) select */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);push();
  Statement s = new Statement();
  FromClause from = new FromClause();
  OrderByClause orderBy = null;
  WhereClause where = null;
  GroupByClause groupBy = null;
  Table t;
  Value v;
    try {
      jj_consume_token(SELECT);
      v = xmlValue();
    s.add(v);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        v = value();
      s.add(v);
      }
      jj_consume_token(FROM);
      t = table();
    from.add(t);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        t = table();
      from.add(t);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        where = whereClause();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUPBY:
        groupBy = groupByClause();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDERBY:
        orderBy = orderByClause();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    s.setFromClause(from);
    s.setOrderByClause(orderBy);
    s.setGroupByClause(groupBy);
    s.setWhereClause(where);
    s.setXmlAggDepth(pop());
    {if (true) return s;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Table table() throws ParseException {
 /*@bgen(jjtree) table */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token name;
  Token alias;
    try {
      name = jj_consume_token(IDENTIFIER);
      alias = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return TableFactory.createTable(name.image, alias.image);}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Column column() throws ParseException {
 /*@bgen(jjtree) column */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tableAlias;
  Token columnName;
    try {
      tableAlias = jj_consume_token(IDENTIFIER);
      jj_consume_token(DOT);
      columnName = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   Column c = ColumnFactory.createColumn(columnName.image, TableFactory.getTableByAlias(tableAlias.image));
   {if (true) return c;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public XmlValue additiveTerm() throws ParseException {
 /*@bgen(jjtree) additiveTerm */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVETERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token op = null;
  XmlValue left = null;
  XmlValue right = null;
    try {
      left = term();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          op = jj_consume_token(PLUS);
          right = additiveTerm();
          break;
        case MINUS:
          op = jj_consume_token(MINUS);
          right = additiveTerm();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(right != null)
    {
          Term t = new Term();
          t.setOperator(op.image);
          t.setLeft(left);
          t.setRight(right);
          {if (true) return t;}
        }
        else
                {if (true) return left;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public XmlValue term() throws ParseException {
 /*@bgen(jjtree) term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token op = null;
  XmlValue left = null;
  XmlValue right = null;
    try {
      left = factor();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
      case SOLIDUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASTERISK:
          op = jj_consume_token(ASTERISK);
          right = term();
          break;
        case SOLIDUS:
          op = jj_consume_token(SOLIDUS);
          right = term();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(right != null)
    {
          Term t = new Term();
          t.setOperator(op.image);
          t.setLeft(left);
          t.setRight(right);
          {if (true) return t;}
        }
        else
                {if (true) return left;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public XmlValue factor() throws ParseException {
 /*@bgen(jjtree) factor */
  SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);XmlValue value;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
          jj_consume_token(MINUS);
          break;
        case PLUS:
          jj_consume_token(PLUS);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      value = value();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    //TODO add sign
    {if (true) return value;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public WhereClause whereClause() throws ParseException {
 /*@bgen(jjtree) whereClause */
  SimpleNode jjtn000 = new SimpleNode(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);WhereClause where = new WhereClause();
  Condition c;
    try {
      jj_consume_token(WHERE);
      c = conditions();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    where.setCondition(c);
    {if (true) return where;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public GroupByClause groupByClause() throws ParseException {
 /*@bgen(jjtree) groupByClause */
  SimpleNode jjtn000 = new SimpleNode(JJTGROUPBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);GroupByClause groupBy = new GroupByClause();
  Column c;
    try {
      jj_consume_token(GROUPBY);
      c = column();
    groupBy.add(c);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        c = column();
      groupBy.add(c);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        {if (true) return groupBy;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OrderByClause orderByClause() throws ParseException {
 /*@bgen(jjtree) orderByClause */
  SimpleNode jjtn000 = new SimpleNode(JJTORDERBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token order = null;
  Column c;
  OrderByClause orderBy = new OrderByClause();
    try {
      jj_consume_token(ORDERBY);
      c = column();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
      case DESC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASC:
          order = jj_consume_token(ASC);
          break;
        case DESC:
          order = jj_consume_token(DESC);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    orderBy.add(ColumnFactory.createSortColumn(c,(order == null || order.image.equals("ASC") ? true : false)));
    order = null;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        c = column();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASC:
        case DESC:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASC:
            order = jj_consume_token(ASC);
            break;
          case DESC:
            order = jj_consume_token(DESC);
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
      orderBy.add(ColumnFactory.createSortColumn(c,(order == null || order.image.equals("ASC") ? true : false)));
      order = null;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return orderBy;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Condition conditions() throws ParseException {
 /*@bgen(jjtree) conditions */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Condition left = null;
  Condition right = null;
    try {
      left = andCondition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        right = conditions();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(right != null)
    {
      {if (true) return new ConditionTree<Condition, Condition >("OR", left, right);}
    }
    else
      {if (true) return left;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Condition andCondition() throws ParseException {
 /*@bgen(jjtree) andCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTANDCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Condition left = null;
  Condition right = null;
    try {
      if (jj_2_1(2)) {
        jj_consume_token(LEFT_PAR);
        left = conditions();
        jj_consume_token(RIGHT_PAR);
        left = new ParenthesizedCondition(left);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case DATE:
        case SUM:
        case AVG:
        case MIN:
        case MAX:
        case COUNT:
        case EXISTS:
        case STRING:
        case IDENTIFIER:
        case LEFT_PAR:
          left = condition();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
            jj_consume_token(AND);
            right = andCondition();
            break;
          default:
            jj_la1[18] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(right != null)
    {
      {if (true) return new ConditionTree<Condition, Condition >("AND", left, right);}
    }
    else
      {if (true) return left;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Condition condition() throws ParseException {
 /*@bgen(jjtree) condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Condition c = null;
  Condition left;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case DATE:
      case SUM:
      case AVG:
      case MIN:
      case MAX:
      case COUNT:
      case STRING:
      case IDENTIFIER:
      case LEFT_PAR:
        left = value();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
        case NOTEQUAL:
        case GREATER:
        case LESSER:
        case LESSEQUAL:
        case GREATEREQUAL:
          c = valueCondition(left);
          break;
        case LIKE:
        case NOT:
        case IN:
          c = columnCondition(left);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case EXISTS:
        c = existsCondition();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  {if (true) return c;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public Condition valueCondition(Condition left) throws ParseException {
 /*@bgen(jjtree) valueCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTVALUECONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionTree<Condition, Condition > t = new ConditionTree<Condition, Condition >();
  Condition right;
  String op;
    try {
      op = relationalOperator();
      right = value();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    t.setLeft(left);
    t.setRight(right);
    t.setOperator(op);
    {if (true) return t;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Condition existsCondition() throws ParseException {
 /*@bgen(jjtree) existsCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTEXISTSCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Statement s;
    try {
      jj_consume_token(EXISTS);
      jj_consume_token(LEFT_PAR);
      s = select();
      jj_consume_token(RIGHT_PAR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new ExistsCondition(s);}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Condition columnCondition(Condition left) throws ParseException {
 /*@bgen(jjtree) columnCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLUMNCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Condition con;
  Column col;
  Token negated =  null;
  Condition s;
  Value like;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        negated = jj_consume_token(NOT);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
        s = inCondition();
            ConditionTree<Condition, Condition > c1 = new ConditionTree<Condition, Condition >();
            c1.setOperator("IN");
            c1.setLeft(left);
            c1.setRight(s);
            c1.setNegated(negated != null);
            con = c1;
        break;
      case LIKE:
        like = likeCondition();
            ConditionTree<Condition, Value > c2 = new ConditionTree<Condition, Value>();
            c2.setOperator("LIKE");
            c2.setLeft(left);
            c2.setRight(like);
            c2.setNegated(negated != null);
            con = c2;
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return con;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Condition inCondition() throws ParseException {
 /*@bgen(jjtree) inCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTINCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Condition c;
    try {
      jj_consume_token(IN);
      jj_consume_token(LEFT_PAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case STRING:
        c = array();
        break;
      case SELECT:
        c = select();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RIGHT_PAR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return c;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Value likeCondition() throws ParseException {
 /*@bgen(jjtree) likeCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTLIKECONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Value v;
    try {
      jj_consume_token(LIKE);
      v = value();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return v;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String relationalOperator() throws ParseException {
 /*@bgen(jjtree) relationalOperator */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATIONALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token op;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        op = jj_consume_token(EQUAL);
        break;
      case NOTEQUAL:
        op = jj_consume_token(NOTEQUAL);
        break;
      case GREATER:
        op = jj_consume_token(GREATER);
        break;
      case LESSER:
        op = jj_consume_token(LESSER);
        break;
      case LESSEQUAL:
        op = jj_consume_token(LESSEQUAL);
        break;
      case GREATEREQUAL:
        op = jj_consume_token(GREATEREQUAL);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return op.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public XmlElementFunction xmlElement() throws ParseException {
 /*@bgen(jjtree) xmlElement */
  SimpleNode jjtn000 = new SimpleNode(JJTXMLELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token name;
  XmlValue value = null;
  XmlElementFunction function = new XmlElementFunction();
    try {
      jj_consume_token(XMLELEMENT);
      jj_consume_token(LEFT_PAR);
      jj_consume_token(NAME);
      name = jj_consume_token(IDENTIFIER);
      if (jj_2_2(2)) {
        jj_consume_token(COMMA);
        xmlAttributes(function);
      } else {
        ;
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        value = xmlValue();
      function.add(value);
      }
      jj_consume_token(RIGHT_PAR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    function.setName(name.image);
    {if (true) return function;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void xmlAttributes(XmlElementFunction f) throws ParseException {
 /*@bgen(jjtree) xmlAttributes */
 SimpleNode jjtn000 = new SimpleNode(JJTXMLATTRIBUTES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);AbstractXmlAttribute att;
    try {
      jj_consume_token(XMLATTRIBUTES);
      jj_consume_token(LEFT_PAR);
      att = xmlAttribute();
    f.addAttribute(att);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        att = xmlAttribute();
      f.addAttribute(att);
      }
      jj_consume_token(RIGHT_PAR);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public AbstractXmlAttribute xmlAttribute() throws ParseException {
 /*@bgen(jjtree) xmlAttribute */
  SimpleNode jjtn000 = new SimpleNode(JJTXMLATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Value v;
  Token alias;
    try {
      v = value();
      jj_consume_token(AS);
      alias = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(v instanceof StringValue)
    {
      {if (true) return new XmlStringAttribute(alias.image, v.getValue());}
    } else if(v instanceof Column) {
      {if (true) return new XmlColumnAttribute(alias.image, (Column)v);}
    } else if(v instanceof SqlFunction) {
      {if (true) return new XmlFunctionAttribute(alias.image, (SqlFunction)v);}
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public XmlConcatFunction xmlConcat() throws ParseException {
 /*@bgen(jjtree) xmlConcat */
  SimpleNode jjtn000 = new SimpleNode(JJTXMLCONCAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);XmlValue v;
  XmlConcatFunction f = new XmlConcatFunction();
    try {
      jj_consume_token(XMLCONCAT);
      jj_consume_token(LEFT_PAR);
      v = xmlValue();
    f.add(v);
      label_7:
      while (true) {
        jj_consume_token(COMMA);
        v = xmlValue();
      f.add(v);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_7;
        }
      }
      jj_consume_token(RIGHT_PAR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return f;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public XmlForestFunction xmlForest() throws ParseException {
 /*@bgen(jjtree) xmlForest */
  SimpleNode jjtn000 = new SimpleNode(JJTXMLFOREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);XmlForestFunction f = new XmlForestFunction();
  XmlElementWrapper v;
    try {
      jj_consume_token(XMLFOREST);
      jj_consume_token(LEFT_PAR);
      v = xmlForestElement();
    f.add(v);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        v = xmlForestElement();
      f.add(v);
      }
      jj_consume_token(RIGHT_PAR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return f;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public XmlElementWrapper xmlForestElement() throws ParseException {
 /*@bgen(jjtree) xmlForestElement */
  SimpleNode jjtn000 = new SimpleNode(JJTXMLFORESTELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token alias;
  XmlValue v;
    try {
      v = xmlValue();
      jj_consume_token(AS);
      alias = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return new XmlElementWrapper(v, alias.image);}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public XmlAggFunction xmlAgg() throws ParseException {
 /*@bgen(jjtree) xmlAgg */
  SimpleNode jjtn000 = new SimpleNode(JJTXMLAGG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OrderByClause orderBy = null;
  XmlAggFunction f = new XmlAggFunction();
  XmlValue v;
  inc();
    try {
      jj_consume_token(XMLAGG);
      jj_consume_token(LEFT_PAR);
      v = xmlValue();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDERBY:
        orderBy = orderByClause();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(RIGHT_PAR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    f.setParameter(v);
    f.setOrderByClause(orderBy);
    dec();
    {if (true) return f;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public SqlFunction sqlFunction() throws ParseException {
 /*@bgen(jjtree) sqlFunction */
  SimpleNode jjtn000 = new SimpleNode(JJTSQLFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token name;
  XmlValue value;
  SqlFunction f;
  Column c = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COUNT:
        name = jj_consume_token(COUNT);
        jj_consume_token(LEFT_PAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          c = column();
          break;
        case ASTERISK:
          jj_consume_token(ASTERISK);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RIGHT_PAR);
      f = new SqlFunction(name.image, c == null ? new StringValue("*") : c);
        break;
      case SUM:
      case AVG:
      case MIN:
      case MAX:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUM:
          name = jj_consume_token(SUM);
          break;
        case MIN:
          name = jj_consume_token(MIN);
          break;
        case MAX:
          name = jj_consume_token(MAX);
          break;
        case AVG:
          name = jj_consume_token(AVG);
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(LEFT_PAR);
        value = additiveTerm();
        jj_consume_token(RIGHT_PAR);
      f = new SqlFunction(name.image, value);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return f;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public XmlValue value() throws ParseException {
 /*@bgen(jjtree) value */
  SimpleNode jjtn000 = new SimpleNode(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token strValue = null;
  Column c = null;
  Statement s = null;
  XmlValue value = null;
  Token date = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        strValue = jj_consume_token(STRING);
        break;
      case NUMBER:
        strValue = jj_consume_token(NUMBER);
        break;
      case DATE:
        jj_consume_token(DATE);
        date = jj_consume_token(STRING);
        break;
      case IDENTIFIER:
        c = column();
        break;
      case SUM:
      case AVG:
      case MIN:
      case MAX:
      case COUNT:
        value = sqlFunction();
        break;
      case LEFT_PAR:
        jj_consume_token(LEFT_PAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SELECT:
          value = select();
          break;
        case NUMBER:
        case DATE:
        case SUM:
        case AVG:
        case MIN:
        case MAX:
        case COUNT:
        case STRING:
        case IDENTIFIER:
        case LEFT_PAR:
        case PLUS:
        case MINUS:
          value = additiveTerm();
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          value = new ParanthesizedValue(value);
        jj_consume_token(RIGHT_PAR);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if(strValue != null)
        {if (true) return new StringValue(strValue.image);}
    else if(c != null)
        {if (true) return c;}
    else if(value != null)
        {if (true) return value;}
    else if(date != null)
        {if (true) return new DateValue(date.image);}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public XmlValue array() throws ParseException {
 /*@bgen(jjtree) array */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token value;
  ArrayValue array = new ArrayValue();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        value = jj_consume_token(STRING);
        break;
      case NUMBER:
        value = jj_consume_token(NUMBER);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    array.add(value.image);

      label_9:
      while (true) {
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          value = jj_consume_token(STRING);
          break;
        case NUMBER:
          value = jj_consume_token(NUMBER);
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          array.add(value.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_9;
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        {if (true) return array;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public XmlValue xmlValue() throws ParseException {
 /*@bgen(jjtree) xmlValue */
  SimpleNode jjtn000 = new SimpleNode(JJTXMLVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);XmlValue v;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case DATE:
      case SUM:
      case AVG:
      case MIN:
      case MAX:
      case COUNT:
      case STRING:
      case IDENTIFIER:
      case LEFT_PAR:
        v = value();
        break;
      case XMLELEMENT:
        v = xmlElement();
        break;
      case XMLCONCAT:
        v = xmlConcat();
        break;
      case XMLFOREST:
        v = xmlForest();
        break;
      case XMLAGG:
        v = xmlAgg();
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return v;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_15() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(COUNT)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(LEFT_PAR)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(DATE)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(LEFT_PAR)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(XMLATTRIBUTES)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SQLXMLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800,0x800,0x4000,0x10000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x60000,0x60000,0x800,0x60000,0x60000,0x0,0x0,0xfc100040,0x0,0xfc100040,0x0,0x0,0x1040,0x0,0x800,0x800,0x800,0x800,0x8000,0x0,0x3c000000,0x7c000000,0x7c101040,0x7c100040,0x40,0x40,0x800,0x7fb00040,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0xc0000,0xc0000,0x30000,0x30000,0xc0000,0xc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x1000,0xb,0xcfe0,0xb,0x4000,0x8800,0x1,0x7e0,0x0,0x0,0x0,0x0,0x0,0x10002,0x0,0x0,0xc000b,0xb,0x1,0x1,0x0,0xb,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SQLXMLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLXMLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLXMLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SQLXMLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLXMLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SQLXMLParser(SQLXMLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SQLXMLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
